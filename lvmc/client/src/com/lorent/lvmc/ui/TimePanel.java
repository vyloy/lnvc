/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TimePanel.java
 *
 * Created on 2011-12-22, 12:01:08
 */
package com.lorent.lvmc.ui;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import javax.swing.JPanel;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

/**
 *
 * @author test
 */
public class TimePanel extends javax.swing.JPanel implements Runnable {
    private Thread time;
    private int timecount=15;
    private Logger log = Logger.getLogger(TimePanel.class);
    /** Creates new form TimePanel */
    public TimePanel() {
        initComponents();
    }
    public TimePanel(boolean start) {
        initComponents();
        if (start) {
           this.start();
        }
    }
    public TimePanel(boolean start,int count) {
        initComponents();
        this.timecount=count;
        if (start) {
            this.start();
        }
    }
    private voteMainPanel mainPanel;
    public TimePanel(boolean start,int count,JPanel jPanel) {
        initComponents();
        this.timecount=count;
        if (start) {
            this.start();
        }
        this.mainPanel=(voteMainPanel) jPanel;
    }
    private boolean isPauseStart=false;
    public TimePanel(boolean start,int leftMinute,int leftSecond ,JPanel jPanel,boolean ispausestart) {
        initComponents();
        this.isPauseStart=ispausestart;
        this.leftMinute=leftMinute;
        this.leftSecond=leftSecond;
        if (start) {
            this.start();
        }
        this.mainPanel=(voteMainPanel) jPanel;
    }
    public void start() {
        this.ispause=false;
        time = new Thread(this);
        time.start();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setText("剩余时间");

        jLabel2.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(jLabel2))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while (time != null) {
            try {
                time.sleep(1000);
            } catch (InterruptedException ex) {
            	log.error("run", ex);
            }
            if (!isPauseStart) {
                runTime();
            } else {
                pauseAndrunTime(leftMinute, leftSecond);
            }
        }
    }
   SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); 
   private String leftTime;

    public String getLeftTime() {
        return leftTime;
    }

    public void setLeftTime(String leftTime) {
        this.leftTime = leftTime;
    }
   
   private String endTime=null;
   private int leftMinute=0;
   private int leftSecond=0;

    public int getLeftMinute() {
        return leftMinute;
    }

    public int getLeftSecond() {
        return leftSecond;
    }
   private void runTime() {
        Calendar nowTime = Calendar.getInstance();
        String startTime = dateFormat.format(nowTime.getTime());
        if (null == endTime) {
            nowTime.add(Calendar.MINUTE, timecount);
            endTime = dateFormat.format(nowTime.getTime());
        }
        long result;
        try {
            result = dateFormat.parse(endTime).getTime() - dateFormat.parse(startTime).getTime();
            if ((result > 0 || result == 0)&& !ispause) {
                long minute = result / 60000;
                long second = (result % 60000) / 1000;
                this.jLabel2.setText(minute + " 分 " + second + " 秒");
                this.leftMinute=Integer.parseInt(""+minute);
                this.leftSecond=Integer.parseInt(""+second);
                this.mainPanel.setLeftTime(minute + " 分 " + second + " 秒");
            } else {
                this.time.interrupt();
            }
        } catch (ParseException ex) {
            log.error("runTime", ex);
        }
    }
    private boolean ispause=false;
    public void pause(){
        this.ispause=true;
        this.time.interrupt();
    }
    private String pauseEndTime;
    public void pauseAndrunTime(int leftMinute, int leftSecond) {
        Calendar nowTime = Calendar.getInstance();
        String startTime = dateFormat.format(nowTime.getTime());
        if (null == pauseEndTime) {
            nowTime.add(Calendar.MINUTE, leftMinute);
            nowTime.add(Calendar.SECOND, leftSecond);
            pauseEndTime = dateFormat.format(nowTime.getTime());
        }
        long result;
        try {
            result = dateFormat.parse(pauseEndTime).getTime() - dateFormat.parse(startTime).getTime();
            if (result > 0 || result == 0) {
                long minute = result / 60000;
                long second = (result % 60000) / 1000;
                this.jLabel2.setText(minute + " 分 " + second + " 秒");
                this.leftMinute = Integer.parseInt(""+minute);
                this.leftSecond = Integer.parseInt(""+ second);
                this.mainPanel.setLeftTime(minute + " 分 " + second + " 秒");
            } else {
                this.time.interrupt();
            }
        } catch (ParseException ex) {
        	log.error("pauseAndrunTime", ex);
        }
    }
}

/*
 * VoteTabItemPane.java
 *
 * Created on __DATE__, __TIME__
 */

package com.lorent.lvmc.ui;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

import org.apache.log4j.Logger;
import org.jivesoftware.smack.Connection;

import com.lorent.common.util.ParaUtil;
import com.lorent.lvmc.bean.OptionDto;
import com.lorent.lvmc.bean.VoteDataChildDto;
import com.lorent.lvmc.controller.ControllerFacade;
import com.lorent.lvmc.controller.ViewManager;
import com.lorent.lvmc.controller.VoteController;
import com.lorent.lvmc.dto.LoginInfo;
import com.lorent.lvmc.util.Constants;
import com.lorent.lvmc.util.DataUtil;
import com.lorent.lvmc.util.StringUtil;

/**
 *
 * @author  __USER__
 */
public class VoteTabItemPane extends javax.swing.JPanel {

	/** Creates new form VoteTabItemPane */
	public VoteTabItemPane() {
		initComponents();
		initConstMap();
		//		this.jPanel4.setLayout(new GridLayout(6, 1));
		this.jLabel1.setVisible(false);
		this.jLabel3.setVisible(false);
		addSelectItemBtn.setToolTipText(StringUtil.getUIString("toolTipText.VoteTabItemPane.addSelectItemBtn"));
	}

	private Logger log = Logger.getLogger(VoteTabItemPane.class);

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jPanel2 = new javax.swing.JPanel();
		jPanel3 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		addSelectItemBtn = new javax.swing.JButton();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		jPanel4 = new javax.swing.JPanel();

		setLayout(new java.awt.BorderLayout());

		jPanel2.setLayout(new java.awt.BorderLayout());

		jPanel3.setPreferredSize(new java.awt.Dimension(800, 56));

		jLabel1.setText("\u4e3b\u9898");

		jLabel2.setText("\u63cf\u8ff0");

		jLabel3.setText("jLabel3");

		jLabel4.setText("jLabel4");

		addSelectItemBtn
				.setIcon(new javax.swing.ImageIcon(
						getClass()
								.getResource(
										"/com/lorent/lvmc/resource/images/vote_icon/list-add-3.png"))); // NOI18N
		addSelectItemBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addSelectItemBtnActionPerformed(evt);
			}
		});

		jLabel5.setText("\u72b6\u6001:");

		jLabel6.setText(" ");

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(
				jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout
				.setHorizontalGroup(jPanel3Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel3Layout
										.createSequentialGroup()
										.addGroup(
												jPanel3Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																addSelectItemBtn,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																23,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGroup(
																jPanel3Layout
																		.createSequentialGroup()
																		.addGap(
																				10,
																				10,
																				10)
																		.addComponent(
																				jLabel6,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				48,
																				javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanel3Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel3Layout
																		.createSequentialGroup()
																		.addComponent(
																				jLabel5,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				118,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addGap(
																				112,
																				112,
																				112)
																		.addComponent(
																				jLabel1)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				jLabel3))
														.addGroup(
																jPanel3Layout
																		.createSequentialGroup()
																		.addComponent(
																				jLabel2)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				jLabel4)))
										.addContainerGap(433, Short.MAX_VALUE)));
		jPanel3Layout
				.setVerticalGroup(jPanel3Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel3Layout
										.createSequentialGroup()
										.addGroup(
												jPanel3Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																addSelectItemBtn,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																22,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGroup(
																jPanel3Layout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.BASELINE)
																		.addComponent(
																				jLabel2)
																		.addComponent(
																				jLabel4)))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanel3Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel3)
														.addComponent(jLabel1)
														.addComponent(jLabel5)
														.addComponent(
																jLabel6,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																15,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));

		jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

		jPanel4.setPreferredSize(new java.awt.Dimension(800, 197));
		jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4,
				javax.swing.BoxLayout.Y_AXIS));
		jPanel2.add(jPanel4, java.awt.BorderLayout.CENTER);

		jScrollPane1.setViewportView(jPanel2);

		add(jScrollPane1, java.awt.BorderLayout.CENTER);
	}// </editor-fold>
	//GEN-END:initComponents

	private void addSelectItemBtnActionPerformed(java.awt.event.ActionEvent evt) {
		//GEN-FIRST:event_addSelectItemBtnActionPerformed
		try {
			VoteItemPanelDialog dialog = new VoteItemPanelDialog(ViewManager
					.getComponent(voteMainPanel.class), true, true);
			Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();//获取屏幕尺寸对象
			int w = (screen.width - this.getSize().width) / 2;//水平位置
			int h = (screen.height - this.getSize().height) / 2;//垂直位置
			dialog.setLocation(w, h);
			dialog
					.setTitle(StringUtil
							.getUIString("voteMainPanel.addnewVoteSelectItemDialogTitle"));
			dialog.setVisible(true);
		} catch (Exception ex) {
			log.error("addSelectItemBtnActionPerformed", ex);
		}
	}

	private SelectItemPanel selectedItemPanel = null;

	public void showUpdateSelectItemDlg(String itemPanelKey) {
		for (Iterator<SelectItemPanel> it = selectItemPanelList.iterator(); it
				.hasNext();) {
			SelectItemPanel selectItemPanel = it.next();
			if (itemPanelKey.equals(selectItemPanel.getItemPanelKey())) {
				try {
					selectedItemPanel = selectItemPanel;
					VoteItemPanelDialog dialog = new VoteItemPanelDialog(
							ViewManager.getComponent(voteMainPanel.class),
							true, false);
					dialog
							.setTitle(StringUtil
									.getUIString("voteMainPanel.updateVoteSelectItemDialogTitle"));
					dialog.getVotetitleField3().setText(
							selectItemPanel.getjLabel2().getText());
					dialog.getTitledescriptField3().setText(
							selectItemPanel.getjLabel4().getText());
					if (Constants.SELECTITEMTYPE_MULTI == selectItemPanel
							.getItemPanelType()) {
						dialog.getMultiselect3().setSelected(true);
					}
					if (Constants.SELECTITEMTYPE_SINGLE == selectItemPanel
							.getItemPanelType()) {
						dialog.getSingleSelect3().setSelected(true);
					}
					if (Constants.SELECTITEMTYPE_YES_OR_NO == selectItemPanel
							.getItemPanelType()) {
						dialog.getYesorno3().setSelected(true);
					}
					DefaultListModel defaultListModel = (DefaultListModel) dialog
							.getVoteItemListField3().getModel();
					OptionDto[] optionDtos = selectItemPanel.getOptionDtos();
					if (null != optionDtos) {
						String[] s = new String[optionDtos.length];
						for (int i = 0; i < optionDtos.length; i++) {
							s[i] = optionDtos[i].getName();
						}
						if (null != s && s.length > 0) {
							for (int i = 0; i < s.length; i++) {
								defaultListModel.addElement(s[i]);
							}
						}
					}
					dialog.setVisible(true);
				} catch (Exception ex) {
					log.error("showUpdateSelectItemDlg", ex);
				}

			}

		}
	}

	private Map<Integer, String> map = new HashMap<Integer, String>();

	private void initConstMap() {
		String[] letter = { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J",
				"K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V",
				"W", "X", "Y", "Z" };
		for (int i = 0; i < letter.length; i++) {
			map.put(i, letter[i]);
		}
	}

	/**
	 *  增加表决项
	 * @param childDto 
	 */
	public void addSelectItemPanel(VoteDataChildDto childDto) {
		//		this.jPanel4.removeAll();
		SelectItemPanel selectItemPanel = new SelectItemPanel(this);
		selectItemPanel.getjLabel1().setText(
				"表决项 " + (selectItemPanelList.size() + 1));
		selectItemPanel.setItemPanelKey(Constants.ITEMKEY
				+ (selectItemPanelList.size() + 1));
		selectItemPanel.getjLabel2().setText(childDto.getTitle());
		selectItemPanel.getjLabel4().setText(childDto.getTitledescription());
		for (int i = 0; i < childDto.getList().size(); i++) {
			if (childDto.getItemType().equals(
					"" + Constants.SELECTITEMTYPE_MULTI)) {
				MultiSelectPanel multiSelectPanel = null;
				OptionDto[] optionDtos = childDto.getList().get(i);
				if (null != optionDtos && optionDtos.length > 0) {
					selectItemPanel.getjPanel1().setLayout(
							new GridLayout(optionDtos.length, 1));
					for (int j = 0; j < optionDtos.length; j++) {
						multiSelectPanel = new MultiSelectPanel();
						selectItemPanel.getMultiSelectPanelList().add(
								multiSelectPanel);
						multiSelectPanel.getjCheckBox1().setText(
								" " + map.get(j) + "  "
										+ optionDtos[j].getName());
						multiSelectPanel.getjCheckBox1().setActionCommand(
								map.get(j));
						selectItemPanel.getjPanel1().add(multiSelectPanel);
					}
					selectItemPanel.setOptionDtos(optionDtos);
					selectItemPanel.getjPanel1().validate();
					selectItemPanel
							.setItemPanelType(Constants.SELECTITEMTYPE_MULTI);
				}
			}
			if (childDto.getItemType().equals(
					"" + Constants.SELECTITEMTYPE_SINGLE)) {
				SingleSelectPanel selectPanel = null;
				OptionDto[] optionDtos = childDto.getList().get(i);
				if (null != optionDtos && optionDtos.length > 0) {
					selectItemPanel.getjPanel1().setLayout(
							new GridLayout(optionDtos.length, 1));
					for (int j = 0; j < optionDtos.length; j++) {
						selectPanel = new SingleSelectPanel();
						selectPanel.getjRadioButton1().setText(
								" " + map.get(j) + "  "
										+ optionDtos[j].getName());
						selectPanel.getjRadioButton1().setActionCommand(
								map.get(j));
						selectItemPanel.getjPanel1().add(selectPanel);
						selectItemPanel.getButtonGroup1().add(
								selectPanel.getjRadioButton1());
					}
					selectItemPanel.setOptionDtos(optionDtos);
					selectItemPanel.getjPanel1().validate();
					selectItemPanel
							.setItemPanelType(Constants.SELECTITEMTYPE_SINGLE);
				}
			}
		}
		if (childDto.getItemType().equals(
				"" + Constants.SELECTITEMTYPE_YES_OR_NO)) {
			selectItemPanel.getjPanel1().setLayout(new GridLayout(1, 1));
			YesorNoPanel yesorNoPanel = new YesorNoPanel();
			selectItemPanel.getjPanel1().add(yesorNoPanel);
			selectItemPanel.getYesorNoPanelList().add(yesorNoPanel);
			selectItemPanel.getjPanel1().validate();
			selectItemPanel
					.setItemPanelType(Constants.SELECTITEMTYPE_YES_OR_NO);
		}
		ControllerFacade.execute("voteController", "addNewVoteItem", ParaUtil
				.newInstance().setString("addNewItem",
						getVoteItem_add(selectItemPanel)));
		this.validate();
	}

	public void updateSelectedItemPanel(VoteDataChildDto childDto) {
		//		this.jPanel4.removeAll();
		for (Iterator<SelectItemPanel> it = selectItemPanelList.iterator(); it
				.hasNext();) {
			SelectItemPanel selectItemPanel = it.next();
			if (null != this.selectedItemPanel
					&& selectedItemPanel.getItemPanelKey() == selectItemPanel
							.getItemPanelKey()) {
				selectItemPanel.getjLabel2().setText(childDto.getTitle());
				selectItemPanel.getjLabel4().setText(
						childDto.getTitledescription());
				selectItemPanel.getjPanel1().removeAll();
				for (int i = 0; i < childDto.getList().size(); i++) {
					if (childDto.getItemType().equals(
							"" + Constants.SELECTITEMTYPE_MULTI)) {
						MultiSelectPanel multiSelectPanel = null;
						OptionDto[] optionDtos = childDto.getList().get(i);
						if (null != optionDtos && optionDtos.length > 0) {
							selectItemPanel.getjPanel1().setLayout(
									new GridLayout(optionDtos.length, 1));
							for (int j = 0; j < optionDtos.length; j++) {
								multiSelectPanel = new MultiSelectPanel();
								selectItemPanel.getMultiSelectPanelList().add(
										multiSelectPanel);
								multiSelectPanel.getjCheckBox1().setText(
										" " + map.get(j) + "  "
												+ optionDtos[j].getName());
								multiSelectPanel.getjCheckBox1()
										.setActionCommand(map.get(j));
								selectItemPanel.getjPanel1().add(
										multiSelectPanel);
							}
							selectItemPanel.setOptionDtos(optionDtos);
							selectItemPanel.getjPanel1().validate();
							selectItemPanel
									.setItemPanelType(Constants.SELECTITEMTYPE_MULTI);
						}
					}
					if (childDto.getItemType().equals(
							"" + Constants.SELECTITEMTYPE_SINGLE)) {
						SingleSelectPanel selectPanel = null;
						OptionDto[] optionDtos = childDto.getList().get(i);
						if (null != optionDtos && optionDtos.length > 0) {
							selectItemPanel.getjPanel1().setLayout(
									new GridLayout(optionDtos.length, 1));
							for (int j = 0; j < optionDtos.length; j++) {
								selectPanel = new SingleSelectPanel();
								selectPanel.getjRadioButton1().setText(
										" " + map.get(j) + "  "
												+ optionDtos[j].getName());
								selectPanel.getjRadioButton1()
										.setActionCommand(map.get(j));
								selectItemPanel.getjPanel1().add(selectPanel);
								selectItemPanel.getButtonGroup1().add(
										selectPanel.getjRadioButton1());
							}
							selectItemPanel.setOptionDtos(optionDtos);
							selectItemPanel.getjPanel1().validate();
							selectItemPanel
									.setItemPanelType(Constants.SELECTITEMTYPE_SINGLE);
						}
					}
				}
				if (childDto.getItemType().equals(
						"" + Constants.SELECTITEMTYPE_YES_OR_NO)) {
					selectItemPanel.getjPanel1()
							.setLayout(new GridLayout(1, 1));
					YesorNoPanel yesorNoPanel = new YesorNoPanel();
					selectItemPanel.getjPanel1().add(yesorNoPanel);
					selectItemPanel.getYesorNoPanelList().add(yesorNoPanel);
					selectItemPanel.getjPanel1().validate();
					selectItemPanel
							.setItemPanelType(Constants.SELECTITEMTYPE_YES_OR_NO);
				}
				ControllerFacade.execute("voteController", "updateVoteItem",
						ParaUtil.newInstance().setString("updateItem",
								getVoteItem_update(selectItemPanel)));
			}
		}
	}

	public void deleteSeletedPanel(String itemPanelKey) {
		for (int i = 0; i < selectItemPanelList.size(); i++) {
			SelectItemPanel selectItemPanel = selectItemPanelList.get(i);
			if (itemPanelKey.equals(selectItemPanel.getItemPanelKey())) {
				if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(
						this, StringUtil
								.getUIString("voteMainPanel.dialogshowMsg"),
						"", JOptionPane.YES_NO_OPTION)) {
					ControllerFacade.execute("voteController",
							"deleteVoteItem", ParaUtil.newInstance()
									.setString(
											"deleteItem",
											getVoteItem_delete(selectItemPanel
													.getId())));
				}
			}
		}
	}

	public void setSelectOptionEdit(boolean flag) {
		if (null != selectItemPanelList)
			for (Iterator<SelectItemPanel> it = selectItemPanelList.iterator(); it
					.hasNext();) {
				SelectItemPanel selectItemPanel = it.next();
				selectItemPanel.getjButton1().setEnabled(false);
				selectItemPanel.getjButton2().setEnabled(false);
				List<MultiSelectPanel> mulList = selectItemPanel
						.getMultiSelectPanelList();
				if (null != mulList) {
					for (Iterator<MultiSelectPanel> it1 = mulList.iterator(); it1
							.hasNext();) {
						MultiSelectPanel multiSelectPanel = it1.next();
						multiSelectPanel.getjCheckBox1().setEnabled(flag);
					}
				}
				List<SingleSelectPanel> singleList = selectItemPanel
						.getSingleSelectPanelList();
				if (null != singleList) {
					for (Iterator<SingleSelectPanel> it1 = singleList
							.iterator(); it1.hasNext();) {
						SingleSelectPanel singleSelectPanel = it1.next();
						singleSelectPanel.getjRadioButton1().setEnabled(flag);
					}
				}
				List<YesorNoPanel> yesorNoPanelsList = selectItemPanel
						.getYesorNoPanelList();
				if (null != yesorNoPanelsList) {
					for (Iterator<YesorNoPanel> it1 = yesorNoPanelsList
							.iterator(); it1.hasNext();) {
						YesorNoPanel yesorNoPanel = it1.next();
						yesorNoPanel.getYesRadio().setEnabled(flag);
						yesorNoPanel.getNoRadio().setEnabled(flag);
					}
				}
			}
	}

	public void selectedItem() {
		for (Iterator<SelectItemPanel> it = selectItemPanelList.iterator(); it
				.hasNext();) {
			SelectItemPanel selectItemPanel = it.next();
			if (Constants.SELECTITEMTYPE_MULTI == selectItemPanel
					.getItemPanelType()) {
				List<MultiSelectPanel> list = selectItemPanel
						.getMultiSelectPanelList();
				System.out.print("多选答案 ");
				for (Iterator<MultiSelectPanel> it1 = list.iterator(); it1
						.hasNext();) {
					MultiSelectPanel multiSelectPanel = it1.next();
					if (multiSelectPanel.getjCheckBox1().isSelected()) {
						System.out.print(multiSelectPanel.getjCheckBox1()
								.getActionCommand());
						System.out.print(multiSelectPanel.getId());
					}
				}
				System.out.print("\n");
			}
			if (Constants.SELECTITEMTYPE_SINGLE == selectItemPanel
					.getItemPanelType()) {
				if (null != selectItemPanel.getButtonGroup1().getSelection()) {
					String s = selectItemPanel.getButtonGroup1().getSelection()
							.getActionCommand();
					List<SingleSelectPanel> list = selectItemPanel
							.getSingleSelectPanelList();
					for (Iterator<SingleSelectPanel> it1 = list.iterator(); it1
							.hasNext();) {
						SingleSelectPanel singleSelectPanel = it1.next();
						if (singleSelectPanel.getjRadioButton1().isSelected()) {
							//							log.debug(singleSelectPanel.getId());
						}
					}
					Object[] objects = selectItemPanel.getButtonGroup1()
							.getSelection().getSelectedObjects();
					//					log.debug("单选答案：" + s);
				}
			}
			if (Constants.SELECTITEMTYPE_YES_OR_NO == selectItemPanel
					.getItemPanelType()) {
				List<YesorNoPanel> list = selectItemPanel.getYesorNoPanelList();
				for (Iterator<YesorNoPanel> it1 = list.iterator(); it1
						.hasNext();) {
					YesorNoPanel yesorNoPanel = it1.next();
					if (null != yesorNoPanel.getRidioGroup1().getSelection()) {
						//						log.debug("单选答案Y/N："
						//								+ yesorNoPanel.getRidioGroup1().getSelection()
						//										.getActionCommand());
					}

				}
			}
		}
	}

	/**
	 * 
	 * @param 提交投票
	 * @return 
	 */
	private List<String> selectedAnswerList = new ArrayList<String>();

	public String getVoteSelected(String themeid) {
		selectedAnswerList.clear();
		StringBuffer buffer = new StringBuffer();
		buffer.append("<operate name=\"dovote\">");
		Connection conn = DataUtil.getValue(DataUtil.Key.Connection);
		LoginInfo info = DataUtil.getValue(DataUtil.Key.LoginInfo);
		buffer.append("<id>" + themeid + "</id>");//主题id
		buffer.append("<roomjid>" + info.getConfno() + "@conference."
				+ conn.getServiceName() + "</roomjid>");
		buffer.append("<user_id>" + info.getUsername() + "</user_id>");
		buffer.append("<selects>");

		for (Iterator<SelectItemPanel> it = selectItemPanelList.iterator(); it
				.hasNext();) {
			SelectItemPanel selectItemPanel = it.next();
			buffer.append("<select>");
			buffer.append("<id>" + selectItemPanel.getId() + "</id>");//表决项id

			if (Constants.SELECTITEMTYPE_MULTI == selectItemPanel
					.getItemPanelType()) {
				List<MultiSelectPanel> list = selectItemPanel
						.getMultiSelectPanelList();
				buffer.append("<options>");
				for (Iterator<MultiSelectPanel> it1 = list.iterator(); it1
						.hasNext();) {
					MultiSelectPanel multiSelectPanel = it1.next();
					if (multiSelectPanel.getjCheckBox1().isSelected()) {
						buffer.append("<option>");
						buffer.append("<id>" + multiSelectPanel.getId()
								+ "</id>");//选项id
						buffer.append("</option>");
						selectedAnswerList.add(multiSelectPanel.getId());
					}
				}
				buffer.append("</options>");
			}
			if (Constants.SELECTITEMTYPE_SINGLE == selectItemPanel
					.getItemPanelType()) {
				List<SingleSelectPanel> list = selectItemPanel
						.getSingleSelectPanelList();
				buffer.append("<options>");
				for (Iterator<SingleSelectPanel> it1 = list.iterator(); it1
						.hasNext();) {
					SingleSelectPanel singleSelectPanel = it1.next();
					if (singleSelectPanel.getjRadioButton1().isSelected()) {
						buffer.append("<option>");
						buffer.append("<id>" + singleSelectPanel.getId()
								+ "</id>");//选项id
						buffer.append("</option>");
						selectedAnswerList.add(singleSelectPanel.getId());
					}
				}
				buffer.append("</options>");
			}
			if (Constants.SELECTITEMTYPE_YES_OR_NO == selectItemPanel
					.getItemPanelType()) {
				List<YesorNoPanel> list = selectItemPanel.getYesorNoPanelList();
				for (Iterator<YesorNoPanel> it1 = list.iterator(); it1
						.hasNext();) {
					YesorNoPanel yesorNoPanel = it1.next();
					if (null != yesorNoPanel.getRidioGroup1().getSelection()) {
						buffer.append("<options>");
						buffer.append("<option>");
						buffer.append("<id>"
								+ yesorNoPanel.getRidioGroup1().getSelection()
										.getActionCommand() + "</id>");//选项id
						buffer.append("</option>");
						buffer.append("</options>");
						selectedAnswerList.add(yesorNoPanel.getRidioGroup1()
								.getSelection().getActionCommand());
					}

				}
			}

			buffer.append("</select>");
		}

		buffer.append("</selects>");
		buffer.append("</operate>");
		return buffer.toString();
	}

	/**
	 * 
	 * @param 删除表决项
	 * @return 
	 */
	public String getVoteItem_delete(String ItemId) {
		StringBuffer buffer = new StringBuffer();
		buffer.append("<operate name=\"delete_select\">");
		Connection conn = DataUtil.getValue(DataUtil.Key.Connection);
		LoginInfo info = DataUtil.getValue(DataUtil.Key.LoginInfo);
		buffer.append("<id>" + ItemId + "</id>");//表决项id
		buffer.append("<roomjid>" + info.getConfno() + "@conference."
				+ conn.getServiceName() + "</roomjid>");
		buffer.append("</operate>");
		return buffer.toString();
	}

	/**
	 * 
	 * @param 增加表决项面板数据
	 * @return 
	 */
	public String getVoteItem_add(SelectItemPanel selectItemPanel) {
		StringBuffer buffer = new StringBuffer();
		buffer.append("<operate name=\"insert_select\">");
		Connection conn = DataUtil.getValue(DataUtil.Key.Connection);
		LoginInfo info = DataUtil.getValue(DataUtil.Key.LoginInfo);
		buffer.append("<roomjid>" + info.getConfno() + "@conference."
				+ conn.getServiceName() + "</roomjid>");
		buffer
				.append("<type>" + selectItemPanel.getItemPanelType()
						+ "</type>");
		buffer.append("<conference_vote_id>" + this.getId()
				+ "</conference_vote_id>");//主题表id
		buffer.append("<select_title>" + selectItemPanel.getjLabel2().getText()
				+ "</select_title>");
		buffer.append("<select_remark>"
				+ selectItemPanel.getjLabel4().getText() + "</select_remark>");
		buffer.append("<select_num>" + "</select_num>");
		buffer.append("<options>");
		OptionDto[] options = selectItemPanel.getOptionDtos();
		if (null != options)
			for (int i = 0; i < options.length; i++) {
				buffer.append("<option><option_name>" + options[i].getName()
						+ "</option_name></option>");
			}
		if (selectItemPanel.getItemPanelType() == Constants.SELECTITEMTYPE_YES_OR_NO) {
			buffer.append("<option><option_name>" + "是"
					+ "</option_name></option>");
			buffer.append("<option><option_name>" + "否"
					+ "</option_name></option>");
		}
		buffer.append("</options>");
		buffer.append("</operate>");
		return buffer.toString();
	}

	/**
	 * 
	 * @param 修改表决项
	 * @return 
	 */
	public String getVoteItem_update(SelectItemPanel selectItemPanel) {
		StringBuffer buffer = new StringBuffer();
		buffer.append("<operate name=\"update_select\">");
		Connection conn = DataUtil.getValue(DataUtil.Key.Connection);
		LoginInfo info = DataUtil.getValue(DataUtil.Key.LoginInfo);
		buffer.append("<roomjid>" + info.getConfno() + "@conference."
				+ conn.getServiceName() + "</roomjid>");
		buffer.append("<id>" + selectItemPanel.getId() + "</id>");//表决项id
		buffer
				.append("<type>" + selectItemPanel.getItemPanelType()
						+ "</type>");
		buffer.append("<select_title>" + selectItemPanel.getjLabel2().getText()
				+ "</select_title>");
		buffer.append("<select_remark>"
				+ selectItemPanel.getjLabel4().getText() + "</select_remark>");
		buffer.append("<select_num>" + "</select_num>");
		buffer.append("<options>");
		OptionDto[] options = selectItemPanel.getOptionDtos();
		if (null != options)
			for (int i = 0; i < options.length; i++) {
				buffer.append("<option><option_name>" + options[i].getName()
						+ "</option_name></option>");
			}
		if (selectItemPanel.getItemPanelType() == Constants.SELECTITEMTYPE_YES_OR_NO) {
			buffer.append("<option><option_name>" + "是"
					+ "</option_name></option>");
			buffer.append("<option><option_name>" + "否"
					+ "</option_name></option>");
		}
		buffer.append("</options>");
		buffer.append("</operate>");
		return buffer.toString();
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton addSelectItemBtn;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JScrollPane jScrollPane1;
	// End of variables declaration//GEN-END:variables

	private String creator;
	private String isstar;
	private String isclose;

	public String getCreator() {
		return creator;
	}

	public void setCreator(String creator) {
		this.creator = creator;
	}

	public String getIsstar() {
		return isstar;
	}

	public void setIsstar(String isstar) {
		this.isstar = isstar;
	}

	public String getIsclose() {
		return isclose;
	}

	public void setIsclose(String isclose) {
		this.isclose = isclose;
	}

	private String id;
	private List<SelectItemPanel> selectItemPanelList = new ArrayList<SelectItemPanel>();//动态添加的表决项面板

	public List<String> getSelectedAnswerList() {
		return selectedAnswerList;
	}

	public void setSelectedAnswerList(List<String> selectedAnswerList) {
		this.selectedAnswerList = selectedAnswerList;
	}

	public SelectItemPanel getSelectedItemPanel() {
		return selectedItemPanel;
	}

	public void setSelectedItemPanel(SelectItemPanel selectedItemPanel) {
		this.selectedItemPanel = selectedItemPanel;
	}

	public List<SelectItemPanel> getSelectItemPanelList() {
		return selectItemPanelList;
	}

	public void setSelectItemPanelList(List<SelectItemPanel> selectItemPanelList) {
		this.selectItemPanelList = selectItemPanelList;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public javax.swing.JButton getAddSelectItemBtn() {
		return addSelectItemBtn;
	}

	public void setAddSelectItemBtn(javax.swing.JButton addSelectItemBtn) {
		this.addSelectItemBtn = addSelectItemBtn;
	}

	public javax.swing.JLabel getjLabel1() {
		return jLabel1;
	}

	public void setjLabel1(javax.swing.JLabel jLabel1) {
		this.jLabel1 = jLabel1;
	}

	public javax.swing.JLabel getjLabel2() {
		return jLabel2;
	}

	public void setjLabel2(javax.swing.JLabel jLabel2) {
		this.jLabel2 = jLabel2;
	}

	public javax.swing.JLabel getjLabel3() {
		return jLabel3;
	}

	public void setjLabel3(javax.swing.JLabel jLabel3) {
		this.jLabel3 = jLabel3;
	}

	public javax.swing.JLabel getjLabel4() {
		return jLabel4;
	}

	public void setjLabel4(javax.swing.JLabel jLabel4) {
		this.jLabel4 = jLabel4;
	}

	public javax.swing.JLabel getjLabel5() {
		return jLabel5;
	}

	public void setjLabel5(javax.swing.JLabel jLabel5) {
		this.jLabel5 = jLabel5;
	}

	public javax.swing.JPanel getjPanel2() {
		return jPanel2;
	}

	public void setjPanel2(javax.swing.JPanel jPanel2) {
		this.jPanel2 = jPanel2;
	}

	public javax.swing.JPanel getjPanel3() {
		return jPanel3;
	}

	public void setjPanel3(javax.swing.JPanel jPanel3) {
		this.jPanel3 = jPanel3;
	}

	public javax.swing.JPanel getjPanel4() {
		return jPanel4;
	}

	public void setjPanel4(javax.swing.JPanel jPanel4) {
		this.jPanel4 = jPanel4;
	}

	public void buttonStatus(String creator) {
		LoginInfo info = DataUtil.getValue(DataUtil.Key.LoginInfo);
		//根据当前登录用户是否创建用户进行判断是否显示修改删除按钮
		try {
			boolean flag = true;
			if (null == creator || info.getUsername().equals(creator)) {
				ViewManager.getComponent(voteMainPanel.class).getstartVoteBtn()
						.setVisible(flag);
				ViewManager.getComponent(voteMainPanel.class)
						.getvoteFinishBtn().setVisible(flag);
				ViewManager.getComponent(voteMainPanel.class)
						.getupdateThemeBtn().setVisible(flag);
				getAddSelectItemBtn().setVisible(flag);
			} else {
				flag = false;
				ViewManager.getComponent(voteMainPanel.class).getstartVoteBtn()
						.setVisible(flag);
				ViewManager.getComponent(voteMainPanel.class)
						.getvoteFinishBtn().setVisible(flag);
				ViewManager.getComponent(voteMainPanel.class)
						.getupdateThemeBtn().setVisible(flag);
				getAddSelectItemBtn().setVisible(flag);
			}
		} catch (Exception ex) {
			log.error("buttonStatus", ex);
		}
	}

	public void setButtonStatus() {
		buttonStatus(this.getCreator());
		boolean isclose = true;
		boolean isstart = true;
		if ("false".equals(this.getIsclose())) {
			isclose = false;
		}
		if ("false".equals(this.getIsstar())) {
			isstart = false;
		}
		try {
			ViewManager.getComponent(voteMainPanel.class).voteStatus(isstart,
					isclose);
		} catch (Exception e) {
			log.error("setButtonStatus", e);
			e.printStackTrace();
		}
		if (!isstart) {
			getjLabel5().setText(StringUtil.getUIString("voteStatus.notstart"));
		}
		if (isstart && !isclose) {
			getjLabel5().setText(StringUtil.getUIString("voteStatus.starting"));
		}
		if (isclose) {
			getjLabel5().setText(StringUtil.getUIString("voteStatus.end"));
		}
	}

}